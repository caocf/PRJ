<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.1.xsd 
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 自动扫描Spring注解配置 -->
	<context:component-scan base-package="com" />

	<!-- 自动加载属性配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置数据源：使用C3P0方式 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="${jdbc.driverClassName}"
		p:jdbcUrl="${jdbc.url}" p:user="${jdbc.username}" p:password="${jdbc.password}"
		p:initialPoolSize="${c3p0.initialPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}"
		p:minPoolSize="${c3p0.minPoolSize}" p:maxIdleTime="${c3p0.maxIdleTime}" />

	<!-- 配置Hibernate的数据源代理工厂：使用p属性通配符，按文件名搜索匹配的映射文件 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource" p:mappingLocations="classpath*:/com/**/*.hbm.xml">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
			</props>
		</property>
	</bean>
		
		<!-- 配置数据源：使用C3P0方式 -->
	<bean id="hwdataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="${hwjdbc.driverClassName}"
		p:jdbcUrl="${hwjdbc.url}" p:user="${hwjdbc.username}" p:password="${hwjdbc.password}"
		p:initialPoolSize="${c3p0.initialPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}"
		p:minPoolSize="${c3p0.minPoolSize}" p:maxIdleTime="${c3p0.maxIdleTime}" />

	<!-- 配置Hibernate的数据源代理工厂：使用p属性通配符，按文件名搜索匹配的映射文件 -->
	<bean id="hwsessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="hwdataSource" p:mappingLocations="classpath*:/com/**/O*.hbm.xml">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hwhibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>
    <bean id="highwayBaseDao" class="com.SmartTraffic.highway.dao.HighwayBaseDao">  
        <property name="hwsessionFactory" ref="hwsessionFactory"></property>  
    </bean> 


	<!-- video配置 -->
   <bean id="videodataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="${videojdbc.driverClassName}"
		p:jdbcUrl="${videojdbc.url}" p:user="${videojdbc.username}" p:password="${videojdbc.password}"
		p:initialPoolSize="${c3p0.initialPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}"
		p:minPoolSize="${c3p0.minPoolSize}" p:maxIdleTime="${c3p0.maxIdleTime}" />

	<!-- 配置Hibernate的数据源代理工厂：使用p属性通配符，按文件名搜索匹配的映射文件 -->
	<bean id="videosessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="videodataSource" p:mappingLocations="classpath*:/com/**/ACCESS*.hbm.xml">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${videohibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>
    <bean id="videoAccessDao" class="com.SmartTraffic.video.dao.impl.VideoAccessDao">  
        <property name="videosessionFactory" ref="videosessionFactory"></property>  
    </bean> 


    <!-- 配置orcle数据源：使用C3P0方式 -->
	<bean id="dataSourceTwo" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" p:driverClass="${oraclejdbc.driverClassName}"
		p:jdbcUrl="${oraclejdbc.url}" p:user="${oraclejdbc.username}" p:password="${oraclejdbc.password}"
		p:initialPoolSize="${c3p0.initialPoolSize}" p:maxPoolSize="${c3p0.maxPoolSize}"
		p:minPoolSize="${c3p0.minPoolSize}" p:maxIdleTime="${c3p0.maxIdleTime}" />
     <!-- 配置 统计分析的数据源-->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSourceTwo" />
		</property>
	</bean>
	<bean id="daoHelper" class="com.ruisi.ext.engine.dao.DaoHelperImpl">
   		<property name="jdbcTemplate">
    		<ref bean="jdbcTemplate" />
   		</property>
  	</bean>	 


	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置声明式事务：在Service实现类或者public实现方法上使用注解@Transactional，则此类或方法就会启用事务机制 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<task:annotation-driven />
	<context:annotation-config />
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<context:component-scan base-package="com" />
</beans>