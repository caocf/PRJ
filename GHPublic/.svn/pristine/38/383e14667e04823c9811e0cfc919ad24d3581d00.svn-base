package com.hztuen.gh.activity.Adapter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.kymjs.kjframe.KJHttp;
import org.kymjs.kjframe.http.HttpCallBack;
import org.kymjs.kjframe.http.HttpParams;
import org.kymjs.kjframe.utils.KJLoger;

import com.gh.modol.GoodsMode;
import com.gh.modol.PermissionInformation;
import com.gh.modol.ShipBoughtModel;
import com.gh.modol.ShipCircleListModel;
import com.gh.modol.ShipModel;
import com.gh.modol.ShipRentModel;
import com.hxkg.ghpublic.R;
import com.hztuen.gh.activity.GoodsDetailsAdcivity;
import com.hztuen.gh.activity.ShipBoughtDetailsActivity;
import com.hztuen.gh.activity.ShipDetailsActivity;
import com.hztuen.gh.activity.ShipRentDetailsActivity;
import com.hztuen.gh.activity.Adapter.PermissionInformationAdapter.ViewHolder;
import com.hztuen.gh.contact.contants;
import com.hztuen.lvyou.utils.Util;

import android.content.Context;
import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class ShipGoodsCircleListAdapter extends BaseAdapter implements OnClickListener{

	private Context context;
	private List<ShipCircleListModel> modellist;
	
	
	public ShipGoodsCircleListAdapter(Context context,List<ShipCircleListModel> modellist){
		this.context = context;
		this.modellist = modellist;
	}
	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return modellist.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return modellist.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		final ViewHolder holder;
		
		   
		
		holder = new ViewHolder();
		convertView=LinearLayout.inflate(context, R.layout.activity_ship_goods_circle_item, null);
		
		holder.title = (TextView)convertView.findViewById(R.id.tv_title); //标题
		holder.content = (TextView) convertView.findViewById(R.id.tv_goods_weight); // 备注
		holder.price = (TextView) convertView.findViewById(R.id.tv_goods_money); // 货物价格
		holder.tradetype = (TextView) convertView.findViewById(R.id.tv_goods_type); // 货源
		holder.postime = (TextView) convertView.findViewById(R.id.tv_date); // 提交时间
		holder.img_case = (ImageView) convertView.findViewById(R.id.img_case); // 图片
		
		holder.tv_sourceid = (TextView) convertView.findViewById(R.id.sourceid); 
		
		
		
		final ShipCircleListModel model = modellist.get(position);
		
		
		holder.title.setText(model.gettitle());
		holder.content.setText(model.getcontent());
		holder.price.setText(model.getprice());
		holder.tradetype.setText(model.gettradetype());
		
		if("".equals(model.getpostime())||model.getpostime()==null){
			holder.postime.setText(model.getpostime());
		}else{
			String mypostime=model.getpostime().substring(0, 16);
			holder.postime.setText(mypostime);
		}
		
		holder.tv_sourceid.setText(model.getsourceid());
		
		if("货源".equals(holder.tradetype.getText().toString()))
		{
			holder.img_case.setBackgroundResource(R.drawable.zhaohuo);
		}else if("租船".equals(holder.tradetype.getText().toString()))
		{
			holder.img_case.setBackgroundResource(R.drawable.zuchuan);
		}else if("船源".equals(holder.tradetype.getText().toString()))
		{
			holder.img_case.setBackgroundResource(R.drawable.zhaochuan);
		}else if("出售".equals(holder.tradetype.getText().toString()))
		{
			holder.img_case.setBackgroundResource(R.drawable.maichuan);
		}
		
		
		convertView.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if ("租船".endsWith(model.gettradetype())) {
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shiprentunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipRentModel model = new ShipRentModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setrentprice(res.getString("rentprice"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));

									Intent in = new Intent();
									in.setClass(context,ShipRentDetailsActivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("shiptype", model.getshiptype());
									in.putExtra("shipname", model.getshipname());
									in.putExtra("tons", model.gettons());
									in.putExtra("rentprice",model.getrentprice());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									
									in.putExtra("postdate", model.getpostdate());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
				}
				
				// 我的发布记录，售船详情
				else if("出售".endsWith(model.gettradetype()))
				{
					
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shipsaleunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipBoughtModel model = new ShipBoughtModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setrentprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));
									model.setshipage(res.getString("shipage"));

									Intent in = new Intent();
									 in.setClass(context, ShipBoughtDetailsActivity.class);
									 in.putExtra("title", model.gettitle());
									 in.putExtra("shiptype", model.getshiptype());
									 in.putExtra("shipname", model.getshipname());
									 in.putExtra("tons", model.gettons());
									 in.putExtra("price", model.getrentprice());
									 in.putExtra("linkman", model.getlinkman());
									 in.putExtra("tel", model.gettel());
									 in.putExtra("remark", model.getremark());
									 in.putExtra("postdate", model.getpostdate());
									 in.putExtra("shipage", model.getshipage());
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
					
				}
				// 我的发布记录，船源详情
				else if("船源".endsWith(model.gettradetype()))
				{
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shipsourceunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipModel model = new ShipModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setemptydock(res.getString("emptydock"));
									model.settargetdock(res.getString("targetdock"));
									model.setroute(res.getString("route"));
									model.setprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));

									Intent in = new Intent();
									in.setClass(context, ShipDetailsActivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("shiptype", model.getshiptype());
									in.putExtra("shipname", model.getshipname());
									in.putExtra("tons", model.gettons());
									in.putExtra("rentprice", model.getprice());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									in.putExtra("postdate", model.getpostdate());
									
									in.putExtra("emptydock", model.getemptydock());
									in.putExtra("targetdock", model.gettargetdock());
									in.putExtra("route", model.getroute());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
					
					
				}
				// 我的发布记录，货源详情
				else if("货源".endsWith(model.gettradetype()))
				{
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.goodsunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									GoodsMode model = new GoodsMode();

									model.setid(res.getString("id"));
									model.settitle(res.getString("titile"));
									model.settype(res.getString("type"));
									model.setname(res.getString("name"));
									model.settons(res.getString("tons"));
									model.setpackaging(res.getString("packaging"));
									model.setstartport(res.getString("startport"));
									model.setunloadport(res
											.getString("unloadport"));
									model.setprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));
									Intent in = new Intent();
									in.setClass(context, GoodsDetailsAdcivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("type", model.gettype());
									in.putExtra("name", model.getname());
									in.putExtra("tons", model.gettons());
									in.putExtra("packaging", model.getpackaging());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									in.putExtra("postdate", model.getpostdate());
									in.putExtra("price", model.getprice());
									
									in.putExtra("startport", model.getstartport());
									in.putExtra("unloadport", model.getunloadport());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
				}
				
			}
		});
		
		return convertView;
	}
	
	
	class ViewHolder {

//		  "id": 14,
//	      "title": "嘉兴货源",
//	      "content": "备注",
//	      "price": "1500元",
//	      "tradetype": "货源",
//	      "postime": "2016-05-19 10:19:02"
		
		TextView id; // 
		TextView title; // 
		TextView content; // 
		TextView price; // 
		TextView tradetype; // 
		TextView postime; // 
		ImageView img_case;
		TextView tv_sourceid;

	}


	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
	}

}
