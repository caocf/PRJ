package com.hztuen.gh.activity;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;
import org.kymjs.kjframe.KJHttp;
import org.kymjs.kjframe.http.HttpCallBack;
import org.kymjs.kjframe.http.HttpParams;
import org.kymjs.kjframe.utils.KJLoger;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.gh.modol.MySendRecordModel;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.hxkg.ghpublic.R;
import com.hztuen.gh.activity.Adapter.MySendRecordAdapter;
import com.hztuen.gh.contact.contants;
import com.hztuen.lvyou.utils.Util;

/**
 * 我的发布记录界面
 * 
 * @author hztuen7
 *
 */
public class MySendRecordActivity extends Activity implements OnClickListener {

//	private ListView lv_record;
	private List<MySendRecordModel> recordlist = new ArrayList<MySendRecordModel>();
	private ImageView permission_list_back;
	private RelativeLayout relative_title;
	private MySendRecordAdapter recordAdapter;
	
	
	private PullToRefreshListView lv_record;
	private GridView mGridView;
	
	private int pagenumber=1;//当前页
	private int totolrows = 0;//数据总量
	private int pageSize = 10;//每页默认条数

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_my_send_record);
		init();
		MySendRecord();
	}

	void init() {
	//	lv_record = (ListView) findViewById(R.id.listview_record);
		
		lv_record = (PullToRefreshListView)findViewById(R.id.listview_record);
		//mGridView = lv_record.getRefreshableView();
		
		recordAdapter = new MySendRecordAdapter(MySendRecordActivity.this,
				recordlist);

		permission_list_back = (ImageView) findViewById(R.id.permission_list_back);
		permission_list_back.setOnClickListener(this);

		relative_title = (RelativeLayout) findViewById(R.id.relative_title);
		relative_title.setOnClickListener(this);
		
		
		lv_record.setOnRefreshListener(new OnRefreshListener2<ListView>() {

			public void onPullDownToRefresh(
					PullToRefreshBase<ListView> refreshView) {
				recordlist.clear();	
				pagenumber=1;
				MySendRecord();

			}

			@Override
			public void onPullUpToRefresh(
					PullToRefreshBase<ListView> refreshView) {
				pagenumber++;
				if((pagenumber-1)*pageSize >= totolrows){
					Toast.makeText(getApplicationContext(), "已加载完全部数据", Toast.LENGTH_SHORT).show();
					lv_record.postDelayed(new Runnable() {
			            @Override
			            public void run() {
			            	lv_record.onRefreshComplete();
			            }
			        }, 1000);
				}else {
					MySendRecord();
				}

			}

		});
	}

	private void MySendRecord() {

		// TODO Auto-generated method stub

		// 访问网络

		KJHttp kjh = new KJHttp();
		List<String> aa = new ArrayList<String>();
		aa.add("Page=" + pagenumber);

		HttpParams params = null;
		try {
			params = Util.prepareKJparams(aa);
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 访问地址
		String toUrl = contants.mypost;
		if (params == null) {
			// 提示参数制造失败
			Util.getTip(getApplicationContext(), "构造参数失败");
		} else if (!toUrl.equals("")) {
			kjh.post(toUrl, params, false, new HttpCallBack() {
				@Override
				public void onSuccess(Map<String, String> headers, byte[] t) {
					super.onSuccess(headers, t);
					// 获取cookie
					KJLoger.debug("===" + headers.get("Set-Cookie"));

					String result = new String(t).trim();
					try {
						
						lv_record.onRefreshComplete();
						JSONObject resultJO = new JSONObject(result);

						JSONObject res = new JSONObject(result);
						JSONArray data = res.getJSONArray("data");
						totolrows = res.getInt("total");
						Log.i("GH_TEXT", data.length() + "我是数据的size");

						for (int i = 0; i < data.length(); i++) {
							JSONObject temp = data.getJSONObject(i);
							MySendRecordModel record = new MySendRecordModel();
							// "id": 4,
							// "title": "油船出售",
							// "content": "备注",
							// "postime": "2016-06-02 15:35:02",
							// "userid": 3,
							// "price": "8900",
							// "tradetype": "出售"
							//

							record.setid(temp.getString("id"));

							record.settitle(temp.getString("title"));
							record.setcontent(temp.getString("content"));
							record.setpostime(temp.getString("postime"));
							record.setuserid(temp.getString("userid"));
							record.setprice(temp.getString("price"));
							record.settradetype(temp.getString("tradetype"));
							
							record.setsourceid(temp.getString("sourceid"));

							recordlist.add(record);

						}
						lv_record.setAdapter(recordAdapter);
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}

				@Override
				public void onFailure(int errorNo, String strMsg) {
					// 关闭进度条
					// Log.d(TAG, strMsg);
					// Util.getTip(cxt, errorNo+"");
					// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
					super.onFailure(errorNo, strMsg);
				}
			});
		}
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.permission_list_back:
			finish();
			break;

		case R.id.relative_title:
			finish();
			break;

		}

	}

}
