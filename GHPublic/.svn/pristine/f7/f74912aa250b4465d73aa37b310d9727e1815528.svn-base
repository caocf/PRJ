package com.hztuen.gh.activity.Adapter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.kymjs.kjframe.KJHttp;
import org.kymjs.kjframe.http.HttpCallBack;
import org.kymjs.kjframe.http.HttpParams;
import org.kymjs.kjframe.utils.KJLoger;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.PaintDrawable;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.TextView;
import android.widget.Toast;

import com.gh.modol.GoodsMode;
import com.gh.modol.MySendRecordModel;
import com.gh.modol.ShipBoughtModel;
import com.gh.modol.ShipModel;
import com.gh.modol.ShipRentModel;
import com.hxkg.ghpublic.R;
import com.hztuen.gh.activity.GoodsDetailsAdcivity;
import com.hztuen.gh.activity.ShipBoughtDetailsActivity;
import com.hztuen.gh.activity.ShipDetailsActivity;
import com.hztuen.gh.activity.ShipRentDetailsActivity;
import com.hztuen.gh.contact.contants;
import com.hztuen.lvyou.utils.SystemStatic;
import com.hztuen.lvyou.utils.Util;

public class MySendRecordAdapter extends BaseAdapter implements OnClickListener{

	private Context context;
	private List<MySendRecordModel> recordletinlist;
	public PopupWindow popupWindowArea;
	private View contentView;

	public MySendRecordAdapter(Context context,
			List<MySendRecordModel> recordletinlist) {
		this.context = context;
		this.recordletinlist = recordletinlist;
	}

	@Override
	public int getCount() {

		return recordletinlist.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return recordletinlist.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		final ViewHolder holder;

		holder = new ViewHolder();
		convertView = LinearLayout.inflate(context,
				R.layout.my_send_record_item, null);

		holder.tv_title = (TextView) convertView.findViewById(R.id.text2);
		holder.tv_content = (TextView) convertView.findViewById(R.id.text2_context);
		holder.tv_id=(TextView)convertView.findViewById(R.id.id_id_id);
		holder.tv_sourceid = (TextView) convertView.findViewById(R.id.id_id);

		holder.tv_postime = (TextView) convertView.findViewById(R.id.text4);
		holder.tv_price = (TextView) convertView.findViewById(R.id.text_money);
		holder.tv_tradetype = (TextView) convertView.findViewById(R.id.text3);
		holder.linear_detail=(LinearLayout)convertView.findViewById(R.id.liner_first);

		holder.btn_cancel=(Button)convertView.findViewById(R.id.btn_cancel);
		
		final MySendRecordModel models = recordletinlist.get(position);

		holder.tv_title.setText(models.gettitle());
		holder.tv_content.setText(models.getcontent());

		holder.tv_postime.setText(models.getpostime());
		holder.tv_price.setText(models.getprice());
		holder.tv_tradetype.setText(models.gettradetype());
		
		holder.tv_sourceid.setText(models.getsourceid());
		holder.tv_id.setText(models.getid());
		
		
		//点击取消发布，根据不同类型的发布记录进行取消
		holder.btn_cancel.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if ("租船".endsWith(models.gettradetype()))
				{
					SystemStatic.removepostiion=position;
					SystemStatic.deleteUrl=contants.removeshiprent;
					SystemStatic.sourceid=holder.tv_sourceid.getText().toString();
					SystemStatic.sendid=holder.tv_id.getText().toString();
					String posttime=holder.tv_postime.getText().toString();
					PopDelete(posttime);
					//DeleteMyRecordTask(posttime);
				}else if("出售".endsWith(models.gettradetype()))
				{
					SystemStatic.removepostiion=position;
					SystemStatic.deleteUrl=contants.removeshipsale;
					SystemStatic.sourceid=holder.tv_sourceid.getText().toString();
					SystemStatic.sendid=holder.tv_id.getText().toString();
					String posttime=holder.tv_postime.getText().toString();
					PopDelete(posttime);
					//DeleteMyRecordTask(posttime);
					
				}else if("船源".endsWith(models.gettradetype()))
				{
					SystemStatic.removepostiion=position;
					SystemStatic.deleteUrl=contants.removeshipsource;
					SystemStatic.sourceid=holder.tv_sourceid.getText().toString();
					SystemStatic.sendid=holder.tv_id.getText().toString();
					String posttime=holder.tv_postime.getText().toString();
					PopDelete(posttime);
					//DeleteMyRecordTask(posttime);
				}else if("货源".endsWith(models.gettradetype()))
				{
					SystemStatic.removepostiion=position;
					SystemStatic.deleteUrl=contants.removegoods;
					SystemStatic.sourceid=holder.tv_sourceid.getText().toString();
					SystemStatic.sendid=holder.tv_id.getText().toString();
					String posttime=holder.tv_postime.getText().toString();
					PopDelete(posttime);
					//DeleteMyRecordTask(posttime);
				}
				
			}
		});
		
		
		
		//点击item上半部分进入我的发布记录详情
		holder.linear_detail.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// 我的发布记录，租船详情
				if ("租船".endsWith(models.gettradetype())) {
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shiprentunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipRentModel model = new ShipRentModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setrentprice(res.getString("rentprice"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));

									Intent in = new Intent();
									in.setClass(context,ShipRentDetailsActivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("shiptype", model.getshiptype());
									in.putExtra("shipname", model.getshipname());
									in.putExtra("tons", model.gettons());
									in.putExtra("rentprice",model.getrentprice());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									in.putExtra("postdate", model.getpostdate());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
				}
				
				// 我的发布记录，售船详情
				else if("出售".endsWith(models.gettradetype()))
				{
					
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shipsaleunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipBoughtModel model = new ShipBoughtModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setrentprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));
									model.setshipage(res.getString("shipage"));

									Intent in = new Intent();
									 in.setClass(context, ShipBoughtDetailsActivity.class);
									 in.putExtra("title", model.gettitle());
									 in.putExtra("shiptype", model.getshiptype());
									 in.putExtra("shipname", model.getshipname());
									 in.putExtra("tons", model.gettons());
									 in.putExtra("price", model.getrentprice());
									 in.putExtra("linkman", model.getlinkman());
									 in.putExtra("tel", model.gettel());
									 in.putExtra("remark", model.getremark());
									 in.putExtra("postdate", model.getpostdate());
									 in.putExtra("shipage", model.getshipage());
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
					
				}
				// 我的发布记录，船源详情
				else if("船源".endsWith(models.gettradetype()))
				{
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.shipsourceunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									ShipModel model = new ShipModel();

									model.setid(res.getString("id"));
									model.settitle(res.getString("title"));
									model.setshiptype(res.getString("shiptype"));
									model.setshipname(res.getString("shipname"));
									model.settons(res.getString("tons"));
									model.setemptydock(res.getString("emptydock"));
									model.settargetdock(res.getString("targetdock"));
									model.setroute(res.getString("route"));
									model.setprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));

									Intent in = new Intent();
									in.setClass(context, ShipDetailsActivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("shiptype", model.getshiptype());
									in.putExtra("shipname", model.getshipname());
									in.putExtra("tons", model.gettons());
									in.putExtra("rentprice", model.getprice());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									in.putExtra("postdate", model.getpostdate());
									
									in.putExtra("emptydock", model.getemptydock());
									in.putExtra("targetdock", model.gettargetdock());
									in.putExtra("route", model.getroute());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
					
					
				}
				// 我的发布记录，货源详情
				else if("货源".endsWith(models.gettradetype()))
				{
					
					KJHttp kjh = new KJHttp();
					List<String> aa = new ArrayList<String>();
					
					aa.add("ID=" +holder.tv_sourceid.getText().toString());

					HttpParams params = null;
					try {
						params = Util.prepareKJparams(aa);
					} catch (Exception e) {
						e.printStackTrace();
					}
					// 访问地址
					String toUrl = contants.goodsunique;
					if (params == null) {
						// 提示参数制造失败
						Util.getTip(context, "构造参数失败");
					} else if (!toUrl.equals("")) {
						kjh.post(toUrl, params, false, new HttpCallBack() {
							@Override
							public void onSuccess(Map<String, String> headers,
									byte[] t) {
								super.onSuccess(headers, t);
								// 获取cookie
								KJLoger.debug("===" + headers.get("Set-Cookie"));

								String result = new String(t).trim();
								try {

									JSONObject res = new JSONObject(result);

									GoodsMode model = new GoodsMode();

									model.setid(res.getString("id"));
									model.settitle(res.getString("titile"));
									model.settype(res.getString("type"));
									model.setname(res.getString("name"));
									model.settons(res.getString("tons"));
									model.setpackaging(res.getString("packaging"));
									model.setstartport(res.getString("startport"));
									model.setunloadport(res
											.getString("unloadport"));
									model.setprice(res.getString("price"));
									model.setlinkman(res.getString("linkman"));
									model.settel(res.getString("tel"));
									model.setremark(res.getString("remark"));
									model.setpostdate(res.getString("postdate"));
									Intent in = new Intent();
									in.setClass(context, GoodsDetailsAdcivity.class);
									in.putExtra("title", model.gettitle());
									in.putExtra("type", model.gettype());
									in.putExtra("name", model.getname());
									in.putExtra("tons", model.gettons());
									in.putExtra("packaging", model.getpackaging());
									in.putExtra("linkman", model.getlinkman());
									in.putExtra("tel", model.gettel());
									in.putExtra("remark", model.getremark());
									in.putExtra("postdate", model.getpostdate());
									in.putExtra("price", model.getprice());
									
									in.putExtra("startport", model.getstartport());
									in.putExtra("unloadport", model.getunloadport());
									in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									 in.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
									// 跳转界面
									context.startActivity(in);

									// lv_record.setAdapter(recordAdapter);
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}

							@Override
							public void onFailure(int errorNo, String strMsg) {
								// 关闭进度条
								// Log.d(TAG, strMsg);
								// Util.getTip(cxt, errorNo+"");
								// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
								super.onFailure(errorNo, strMsg);
							}
						});
					}
					
				}

			}
		});

		return convertView;
	}

	class ViewHolder {

		// "id": 9,
		// "title": "fgfff",
		// "content": "ffx",
		// "postime": "2016-06-24 13:55:19",
		// "userid": 4,
		// "price": "ffffd",
		// "tradetype": "出售"

		TextView tv_id;
		TextView tv_title;
		TextView tv_content;

		TextView tv_postime;
		TextView tv_userid;
		TextView tv_price;
		TextView tv_tradetype;
		TextView tv_sourceid;
		Button btn_cancel;
		LinearLayout linear_detail;

	}
	
	
	


	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
	}

	
	// 按条件Id删除我的发布记录
		private void DeleteMyRecordTask(String posttime) {

			// 

			// 访问网络

			KJHttp kjh = new KJHttp();
			List<String> aa = new ArrayList<String>();
			 aa.add("Sourceid="+SystemStatic.sourceid);
			 aa.add("Id="+SystemStatic.sendid);
			 aa.add("time="+posttime);

			HttpParams params = null;
			try {
				params = Util.prepareKJparams(aa);
			} catch (Exception e) {
				e.printStackTrace();
			}
			// 访问地址
			String toUrl = SystemStatic.deleteUrl;
			if (!toUrl.equals("")) {
				kjh.post(toUrl, params, false, new HttpCallBack() {
					@Override
					public void onSuccess(Map<String, String> headers, byte[] t) {
						super.onSuccess(headers, t);
						// 获取cookie
						KJLoger.debug("===" + headers.get("Set-Cookie"));
						// Log.i(TAG+":kymjs---http", new String(t));
						String result = new String(t).trim();
						String Str =result.replace("\"", "");
						if("1".endsWith(Str))
						{
							Toast.makeText(context, "取消发布成功", Toast.LENGTH_SHORT).show();
							recordletinlist.remove(SystemStatic.removepostiion);
							notifyDataSetChanged();
						}
					}

					@Override
					public void onFailure(int errorNo, String strMsg) {
						// 关闭进度条
						// Log.d(TAG, strMsg);
						// Util.getTip(cxt, errorNo+"");
						// mSVProgressHUD.showErrorWithStatus("验证过程出现问题");
						super.onFailure(errorNo, strMsg);
					}
				});
			}
		}
	
	private void PopDelete(final String posttime)
	{
		contentView = ((Activity) context).getLayoutInflater().inflate(R.layout.pop_delete_my_send_record, null);
		
		
		Button btn_confirm=(Button)contentView.findViewById(R.id.btn_confirm);
		Button btn_cancel=(Button)contentView.findViewById(R.id.btn_cancel);
		btn_cancel.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				popupWindowArea.dismiss();
				
			}
		});
		btn_confirm.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				DeleteMyRecordTask(posttime);
				popupWindowArea.dismiss();
				
			}
		});

			LinearLayout parent6 = (LinearLayout) ((Activity) context).findViewById(R.id.father_send_record);//父窗口view  
			popupWindowArea = new PopupWindow(contentView, parent6.getWidth()*4/5, ViewGroup.LayoutParams.WRAP_CONTENT);
			popupWindowArea.setFocusable(true);
			popupWindowArea.setOutsideTouchable(true);
			popupWindowArea.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
			popupWindowArea.setBackgroundDrawable(new PaintDrawable());
			WindowManager.LayoutParams lp6 =((Activity) context). getWindow().getAttributes();
			lp6.alpha = 0.5f;
			((Activity) context).getWindow().setAttributes(lp6);
			
			popupWindowArea.setOnDismissListener(new OnDismissListener() {

				@Override
				public void onDismiss() {
					WindowManager.LayoutParams lp =((Activity) context). getWindow().getAttributes();
					lp.alpha = 1f;
					((Activity) context).getWindow().setAttributes(lp);
				}
			});
			
			popupWindowArea.showAtLocation(parent6, Gravity.CENTER, 0,0);
	}
}
